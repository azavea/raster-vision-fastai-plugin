#!/bin/bash

# This is the same as the main repo `run` script except that it:
# * mounts the fastai_plugin directory
# * uses the -fastai Docker image
# * mounts the main RV repo only if it's pointed to by RASTER_VISION_REPO
# * removes the --docs option
# * uses $REPO_ROOT/notebooks as the notebooks dir

set -e

if [[ -n "${RASTER_VISION_DEBUG}" ]]; then
    set -x
fi

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ] ; do SOURCE="$(readlink "$SOURCE")"; done
DOCKER_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
REPO_ROOT="$( cd -P "$( dirname "$DOCKER_DIR" )" && pwd )"

function usage() {
    echo -n \
         "Usage: $(basename "$0") <options> <command>
Run a console in the raster-vision-fastai Docker image locally.

Environment variables:
RASTER_VISION_DATA_DIR (directory for storing data; mounted to /opt/data)
AWS_PROFILE (optional AWS profile)
RASTER_VISION_REPO (optional path to main RV repo; mounted to /opt/src)

Options:
--aws forwards AWS credentials (sets AWS_PROFILE env var and mounts ~/.aws to /root/.aws)
--tensorboard maps port 6006
--gpu use the NVIDIA runtime and GPU image
--name sets the name of the running container
--jupyter forwards port 8888, mounts ./notebooks to /opt/notebooks, and runs Jupyter
--debug maps port 3004 on localhost to 3000 inside container

All arguments after above options are passed to 'docker run'.
"
}

IMAGE="raster-vision-fastai"
RASTER_VISION_DATA_DIR="${RASTER_VISION_DATA_DIR:-${REPO_ROOT}/data}"

# Parse options using scheme in
# https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        --help)
        usage
        exit 0
        shift
        ;;
        --aws)
        AWS="-e AWS_PROFILE=${AWS_PROFILE:-default} -v ${HOME}/.aws:/root/.aws:ro"
        shift # past argument
        ;;
        --tensorboard)
        TENSORBOARD="-p 6006:6006"
        shift # past argument
        ;;
        --gpu)
        RUNTIME="--runtime=nvidia"
        shift # past argument
        ;;
        --name)
        shift
        NAME="--name $1"
        shift
        ;;
        --jupyter)
        JUPYTER="-p 8888:8888"
        CMD=(jupyter notebook --ip 0.0.0.0 --port 8888 --no-browser --allow-root --notebook-dir=/opt/src)
        shift
        ;;
        --debug)
        DEBUG="-p 3004:3000"
        shift
        ;;
        *) # unknown option
        POSITIONAL+=("$1") # save it in an array for later
        shift # past argument
        ;;
    esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [ -z "${CMD}" ]
then
    CMD=(${@:1})
fi

if [ -z "$RASTER_VISION_REPO" ]
then
    RV_SRC_FLAGS=""
else
    RV_SRC_FLAGS="-v ${RASTER_VISION_REPO}/rastervision:/opt/src/rastervision"
fi

if [ -z "$FASTAI_REPO" ]
then
    FASTAI_SRC_FLAGS=""
else
    FASTAI_SRC_FLAGS="-v ${FASTAI_REPO}:/opt/src/fastai"
fi

if [ "${BASH_SOURCE[0]}" = "${0}" ]
then
    docker run ${RUNTIME} ${NAME} --rm -it \
        -v "${HOME}"/.rastervision:/root/.rastervision \
        -v "${REPO_ROOT}"/fastai_plugin:/opt/src/fastai_plugin \
        -v "${REPO_ROOT}"/examples:/opt/src/examples \
        -v "${REPO_ROOT}"/scripts:/opt/src/scripts \
        -v ${RASTER_VISION_DATA_DIR}:/opt/data \
        ${TENSORBOARD} ${AWS} ${JUPYTER} ${DOCS} ${DEBUG} \
        ${RV_SRC_FLAGS} \
        ${FASTAI_SRC_FLAGS} \
        ${IMAGE} "${CMD[@]}"
fi
